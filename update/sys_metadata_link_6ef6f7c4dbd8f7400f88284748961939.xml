<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>a803b38513296240e5adbd522244b089</documentkey>
        <payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="x_snc_servicenow_s_servicenow_scripting">
    <x_snc_servicenow_s_servicenow_scripting action="INSERT_OR_UPDATE">
        <code_url/>
        <code_url_2/>
        <details/>
        <example_steps/>
        <example_url/>
        <module/>
        <number>SNSCRIPT0001165</number>
        <replaced_by/>
        <script>Called From: Populate the Access Level Box&#13;
&#13;
&#13;
// **Notes Name must match Client Script where you great a new GlideAjax. Also Client callable needs to be checked.&#13;
// gs.log("Inside the function YYYY"); // (Use gs.log to help debug by printing messages to the Script Logs)&#13;
&#13;
var GetAccounts = Class.create();//Start by creating a variable Class&#13;
GetAccounts.prototype = Object.extendsObject(AbstractAjaxProcessor, {//Have that variable extend AbstractAjaxProcessor&#13;
getAccounts: function() {//This start function needs to match the Client Script sysparm_name declaration&#13;
var enterprise_app = this.getParameter('sysparm_account');//Use this.getParamter('sysparm_') to retrieve the information you declared on the client&#13;
&#13;
// gs.log("Enterprise App: "+enterprise_app);&#13;
&#13;
var acct = [];//acct is an array&#13;
var target = new GlideRecord('u_appl_avail_roles');// Very similar to a GlideRecord&#13;
target.addQuery('u_enterprise_app', enterprise_app);//Searches my table for only results with a matching location&#13;
// target.groupBy('u_role'); Groups the results to only return unique results&#13;
target.query();//Runs the query&#13;
 &#13;
while(target.next()) { //Cycles through the query results&#13;
&#13;
//gs.log("inside the while loop");&#13;
//gs.log("u_role"+target.u_role);&#13;
//gs.log("to string u_role"+target.u_role.toString());&#13;
//gs.log("universal table u_name"+target.u_role.u_name);&#13;
&#13;
&#13;
acct.push(target.u_role.u_name); //adds each record to the array&#13;
} //ends while target&#13;
return acct.toString();//converts the array to a string before returning it to the client&#13;
} //ends getAccount Function&#13;
}); //ends the extendsObject variables&#13;
</script>
        <script_2/>
        <script_type>Script Includes</script_type>
        <short_description>Get Available Roles for Application Specified in Service Catalog Variable</short_description>
        <state>Submitted</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-08-28 19:41:41</sys_created_on>
        <sys_id>a803b38513296240e5adbd522244b089</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2016-08-28 19:41:41</sys_updated_on>
        <tested_on_helsinki/>
    </x_snc_servicenow_s_servicenow_scripting>
</record_update>
]]></payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-03-15 19:02:04</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>6ef6f7c4dbd8f7400f88284748961939</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SNSCRIPT0001165</sys_name>
        <sys_package display_value="ServiceNow Scripting" source="x_snc_servicenow_s">4e23d43313892a00e5adbd522244b054</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="ServiceNow Scripting">4e23d43313892a00e5adbd522244b054</sys_scope>
        <sys_update_name>sys_metadata_link_6ef6f7c4dbd8f7400f88284748961939</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-03-15 19:02:04</sys_updated_on>
        <tablename>x_snc_servicenow_s_servicenow_scripting</tablename>
    </sys_metadata_link>
</record_update>
