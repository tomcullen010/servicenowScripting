<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>066a638113296240e5adbd522244b09b</documentkey>
        <payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="x_snc_servicenow_s_servicenow_scripting">
    <x_snc_servicenow_s_servicenow_scripting action="INSERT_OR_UPDATE">
        <code_url/>
        <code_url_2/>
        <details/>
        <example_steps/>
        <example_url/>
        <module/>
        <number>SNSCRIPT0001112</number>
        <replaced_by/>
        <script>How to create an event and update a field on a record for a document that has been attached either via the paperclip or through an inbound email action.  Simply creating a business rule on your task table with the hasAttachment == true condition will not work because adding an attachment does not force an update to the table in question.  It only updates the sys_attachment table and creates a relationship to your task table.  Though you might be able to create a business rule on the sys_attachment table and use the sys_parameters like we do below to update the associated record on your task table.&#13;
&#13;
Prerequsite: create a u_documentation_uploaded true/false field on your table.&#13;
&#13;
The sys_attachement table lists a Table name and Table Sys ID for each attachment uploaded.  The Table Sys ID is the sys_id of the record on the table.&#13;
&#13;
Step 1:  Register an event&#13;
&#13;
&#13;
Step 2: Create a business rule to trigger the event.&#13;
&#13;
gs.eventQueue("hr.attachement", current, current.table_sys_id, current.sys_id);&#13;
&#13;
Note: Sometimes it takes 10 seconds or so before the rule runs, so be patient.&#13;
&#13;
Step 3: Create a Script Action to update the flag on your record when the event is triggered.  The event.parm1 is the sys_id of the record.&#13;
&#13;
gs.log('*** we made it into the script action');&#13;
var ua = new GlideRecord('hr');&#13;
ua.get(event.parm1);&#13;
ua.u_documentation_uploaded = true;&#13;
gs.log('*** ' + event.parm1);&#13;
ua.update();&#13;
</script>
        <script_2/>
        <script_type>Script Actions</script_type>
        <short_description>var oldName = 'Koch Fertilizer';  var newName = 'Koch Ag &amp; Energy Services'; var oldNamePattern = ne</short_description>
        <state>Submitted</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-08-28 19:04:27</sys_created_on>
        <sys_id>066a638113296240e5adbd522244b09b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2016-08-28 19:04:27</sys_updated_on>
        <tested_on_helsinki/>
    </x_snc_servicenow_s_servicenow_scripting>
</record_update>
]]></payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-03-15 19:01:47</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>66e6f384dbd8f7400f8828474896193b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SNSCRIPT0001112</sys_name>
        <sys_package display_value="ServiceNow Scripting" source="x_snc_servicenow_s">4e23d43313892a00e5adbd522244b054</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="ServiceNow Scripting">4e23d43313892a00e5adbd522244b054</sys_scope>
        <sys_update_name>sys_metadata_link_66e6f384dbd8f7400f8828474896193b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-03-15 19:01:47</sys_updated_on>
        <tablename>x_snc_servicenow_s_servicenow_scripting</tablename>
    </sys_metadata_link>
</record_update>
